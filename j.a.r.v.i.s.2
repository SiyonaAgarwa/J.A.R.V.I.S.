import pyttsx3 #pip install pyttsx3
import datetime
import speech_recognition as sr #pip install SpeechRecognition
import wikipedia #pip install wikipedia
import webbrowser
import os
import pywhatkit as kit #pip install pywhatkit
import pyjokes #pip install pyjokes
import pyautogui #pip install PyAutoUI
import time
import requests

engine = pyttsx3.init('sapi5')
voices=engine.getProperty('voices')
#print (voices) gives the no of voices present in the system
#print (voices[0].id) gives info about present voice at index 0(we have 2 voices 0=male,1=female)

def news():
    main_url="http://newsapi.org/v2/top-headlines?sources=techcrunch&apikey=a0d6ef2359974cd39e52179f0cc7ea83"
    main_page=requests.get(main_url).json()
    articles=main_page["articles"]
    head=[]
    day=["first","second","third","fourth","fifth","sixth","seventh","eighth","ninth","tenth"]
    for a in articles:
        head.append(a["title"])
    for i in range (len(day)):
        speak(f"today's {day[i]} news is:{head[i]}")
        print(f"today's {day[i]} news is: {head[i]}")
        speak("say yes to cotinue or stop to stop" )
        q=takeCommand().lower()
        if 'stop' in q:
            break

def speak(audio):
    engine.say(audio) 
    engine.runAndWait() #Without this command, speech will not be audible to us.

def wishMe():
    #Gives greetings of the day and introduce one self
    hour=int(datetime.datetime.now().hour)
    if hour>=0 and hour<12:
        speak("Good Morning Siyona!")
    elif hour>=0 and hour<18:
        speak("Good Afternoon Siyona!")
    else:
        speak("Good Evening Siyona")
    speak("I am Jarvis,Please tell me how may I help you")

def takeCommand():
    #It takes microphone input from the user and returns string output

    r = sr.Recognizer() #This class helps us to recognise our audio
    with sr.Microphone() as source:
        print("Listening...")
        r.pause_threshold = 1 #threshold=seconds of non speaking audio before a phase is considered complete(means i can take a gap of 1 sec while speaking)
        audio = r.listen(source)
    
    try:
        print("Recognizing...")    
        query = r.recognize_google(audio, language='en-in') #Using Google Speech Recognition API to convert the spoken audio (audio variable) into text.
        print(f"User said: {query}\n")  #User query will be printed.

    except Exception as e:
        # print(e)    
        print("Say that again please...")   #Say that again will be printed in case of improper voice 
        return "None" #None string will be returned
    return query

if __name__=="__main__":
    wishMe()
    while True:
    # if 1:
        query = takeCommand().lower() #Converting user query into lower case

        # Logic for executing tasks based on query
        if 'open notepad' in query: #not working
            speak("Opening Notepad")
            npath="C:\\Program Files\\WindowsApps\\Microsoft.WindowsNotepad_11.2406.9.0_x64__8wekyb3d8bbwe\\Notepad\\notepad.exe"
            os.startfile(npath)
        elif 'close notepad' in query:
            speak("Okay ma'am, closing notepad")
            os.system("taskkill /f /im notepad.exe")
        
        elif 'open command prompt' in query:
            os.system("start cmd")
        elif 'close command prompt' in query:
            speak("Okay ma'am, closing command prompt")
            os.system("taskkill /f /im cmd.exe")

        elif 'open vs code' in query:
            codePath ="C:\\Users\\dell\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"
            os.startfile(codePath)
        elif 'close vs code' in query:
            speak("Okay ma'am, closing command prompt")
            os.system("taskkill /f /im code.exe")

        if 'wikipedia' in query:  #if wikipedia found in the query then this block will be executed
            speak('Searching Wikipedia...')
            query = query.replace("wikipedia", "")
            results = wikipedia.summary(query, sentences=1) 
            speak("According to Wikipedia")
            print(results)
            speak(results)
        
        elif 'gpt' in query:
            webbrowser.open("chatgpt.com")
        
        elif 'open youtube' in query:
            speak("What do you want me to play")
            str=takeCommand().lower()
            kit.playonyt(str)
        
        elif 'open google' in query:
            speak("Ma'am, what should i search on google?")
            c = takeCommand().lower()
            #webbrowser.open("google.com")
            query_string = c.replace(' ', '+') #It'll tke everything i say as a url hence convert it into string
            webbrowser.open(f"https://www.google.com/search?q={query_string}")
        
        elif 'the time' in query:
            strTime = datetime.datetime.now().strftime("%H:%M:%S")    
            speak(f"Ma'am, the time is {strTime}")

        elif 'tell me a joke' in query:
            j=pyjokes.get_joke()
            speak(j)   

        elif 'shutdown the system' in query:
            os.system("shutdown /s /t 5")
        elif 'restart the system' in query:
            os.system("shutdown /s /t 5")
        elif 'sleep the system' in query:
            os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
        
        elif 'switch the window' in query:
            pyautogui.keyDown("alt")
            pyautogui.press("tab")
            time.sleep(1)
            pyautogui.keyUp("alt")

        elif 'tell me news' in query:
            news()
        elif "take screenshot" in query or "take a screenshot" in query:
            speak("sir, please tell me the name for this screenshot file")
            name = takeCommand().lower()
            time.sleep(3)
            speak("please ma'am hold the screen for few seconds, i am taking sreenshot")
            img = pyautogui.screenshot()
            img.save(f"(name).png")
            speak("i am done ma'am, the screenshot is saved in our main folder. now i am ready for next command")
        elif 'quit' in query or 'exit' in query:
            speak("Goodbye Siyona!")
            break 
